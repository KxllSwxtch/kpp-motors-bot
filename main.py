import telebot
import os
import re
import requests
import locale
import logging
import urllib.parse

from io import BytesIO
from telebot import types
from dotenv import load_dotenv
from urllib.parse import urlparse, parse_qs
from utils import (
    generate_encar_photo_url,
    clean_number,
    get_customs_fees,
    calculate_age,
    format_number,
)

CALCULATE_CAR_TEXT = "–†–∞—Å—á—ë—Ç –ê–≤—Ç–æ–º–æ–±–∏–ª—è"
DEALER_COMMISSION = 0.02  # 2%

PROXY_URL = "http://B01vby:GBno0x@45.118.250.2:8000"
proxies = {"http": PROXY_URL, "https": PROXY_URL}


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
DATABASE_URL = "postgres://uea5qru3fhjlj:p44343a46d4f1882a5ba2413935c9b9f0c284e6e759a34cf9569444d16832d4fe@c97r84s7psuajm.cluster-czrs8kj4isg7.us-east-1.rds.amazonaws.com:5432/d9pr93olpfl9bj"


# Configure logging
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# Load keys from .env file
load_dotenv()
bot_token = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(bot_token)

# Set locale for number formatting
locale.setlocale(locale.LC_ALL, "en_US.UTF-8")

# Storage for the last error message ID
last_error_message_id = {}

# global variables
car_data = {}
car_id_external = ""
total_car_price = 0
krw_rub_rate = 0
rub_to_krw_rate = 0
usd_rate = 0
users = set()

admins = []
CHANNEL_USERNAME = "@bazarish_auto"  # –Æ–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞

car_month = None
car_year = None

vehicle_id = None
vehicle_no = None


def print_message(message):
    print("\n\n##############")
    print(f"{message}")
    print("##############\n\n")
    return None


def is_subscribed(user_id):
    try:
        chat_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
def set_bot_commands():
    commands = [
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("cbr", "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"),
        # types.BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    ]
    bot.set_my_commands(commands)


def get_rub_to_krw_rate():
    global rub_to_krw_rate

    url = "https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/rub.json"

    try:
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω—ã–π (–∫–æ–¥ 200)
        data = response.json()

        rub_to_krw = data["rub"]["krw"]  # –î–æ—Å—Ç–∞–µ–º –∫—É—Ä—Å —Ä—É–±–ª—è –∫ –≤–æ–Ω–µ
        rub_to_krw_rate = rub_to_krw

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return None


# –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞
rate = get_rub_to_krw_rate()
if rate:
    print(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å RUB ‚Üí KRW: {rate:.2f} ‚Ç©")
else:
    print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å API
def get_currency_rates():
    global usd_rate, krw_rub_rate

    print_message("–ü–û–õ–£–ß–ê–ï–ú –ö–£–†–° –¶–ë")

    url = "https://www.cbr-xml-daily.ru/daily_json.js"
    response = requests.get(url)
    data = response.json()

    eur = data["Valute"]["EUR"]["Value"] + (
        data["Valute"]["EUR"]["Value"] * DEALER_COMMISSION
    )
    usd = data["Valute"]["USD"]["Value"] + (
        data["Valute"]["USD"]["Value"] * DEALER_COMMISSION
    )
    krw = (
        data["Valute"]["KRW"]["Value"]
        + (data["Valute"]["KRW"]["Value"] * DEALER_COMMISSION)
    ) / data["Valute"]["KRW"]["Nominal"]
    cny = data["Valute"]["CNY"]["Value"] + (
        data["Valute"]["CNY"]["Value"] * DEALER_COMMISSION
    )

    usd_rate = usd
    krw_rub_rate = krw

    rates_text = (
        f"EUR: <b>{eur:.2f} ‚ÇΩ</b>\n"
        f"USD: <b>{usd:.2f} ‚ÇΩ</b>\n"
        f"KRW: <b>{krw:.2f} ‚ÇΩ</b>\n"
        f"CNY: <b>{cny:.2f} ‚ÇΩ</b>"
    )

    return rates_text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cbr
@bot.message_handler(commands=["cbr"])
def cbr_command(message):
    user_id = message.from_user.id

    if not is_subscribed(user_id):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"
            )
        )

        bot.send_message(
            message.chat.id,
            f"üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=keyboard,
        )
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

    try:
        rates_text = get_currency_rates()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data="calculate_another"
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(
            message.chat.id, rates_text, reply_markup=keyboard, parse_mode="HTML"
        )
    except Exception as e:
        bot.send_message(
            message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")


# Main menu creation function
def main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(types.KeyboardButton(CALCULATE_CAR_TEXT))
    keyboard.add(
        types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É"),
        types.KeyboardButton("–û –Ω–∞—Å"),
        types.KeyboardButton("Telegram-–∫–∞–Ω–∞–ª"),
        types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp"),
        types.KeyboardButton("Instagram"),
        types.KeyboardButton("Tik-Tok"),
        types.KeyboardButton("Facebook"),
    )
    return keyboard


@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    user_id = call.from_user.id

    if is_subscribed(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")
        bot.send_message(
            call.message.chat.id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=main_menu(),
        )
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"
            )
        )

        bot.send_message(
            call.message.chat.id,
            "üö´ –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=keyboard,
        )


# Start command handler
@bot.message_handler(commands=["start"])
def send_welcome(message):
    user_id = message.from_user.id

    if not is_subscribed(user_id):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"
            )
        )

        bot.send_message(
            message.chat.id,
            f"üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=keyboard,
        )
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

    get_currency_rates()

    user_first_name = message.from_user.first_name
    welcome_message = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}!\n\n"
        "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Bazarish Auto. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –≤–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    bot.send_message(message.chat.id, welcome_message, reply_markup=main_menu())


# Error handling function
def send_error_message(message, error_text):
    global last_error_message_id

    # Remove previous error message if it exists
    if last_error_message_id.get(message.chat.id):
        try:
            bot.delete_message(message.chat.id, last_error_message_id[message.chat.id])
        except Exception as e:
            logging.error(f"Error deleting message: {e}")

    # Send new error message and store its ID
    error_message = bot.reply_to(message, error_text, reply_markup=main_menu())
    last_error_message_id[message.chat.id] = error_message.id
    logging.error(f"Error sent to user {message.chat.id}: {error_text}")


def get_car_info(url):
    global car_id_external, vehicle_no, vehicle_id, car_year, car_month

    # driver = create_driver()

    car_id_match = re.findall(r"\d+", url)
    car_id = car_id_match[0]
    car_id_external = car_id

    url = f"https://api.encar.com/v1/readside/vehicle/{car_id}"

    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
        "Referer": "http://www.encar.com/",
        "Cache-Control": "max-age=0",
        "Connection": "keep-alive",
    }

    response = requests.get(url, headers=headers).json()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    car_make = response["category"]["manufacturerEnglishName"]  # –ú–∞—Ä–∫–∞
    car_model = response["category"]["modelGroupEnglishName"]  # –ú–æ–¥–µ–ª—å
    car_trim = response["category"]["gradeDetailEnglishName"] or ""  # –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è

    car_title = f"{car_make} {car_model} {car_trim}"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é
    car_price = str(response["advertisement"]["price"])
    car_date = response["category"]["yearMonth"]
    year = car_date[2:4]
    month = car_date[4:]
    car_year = year
    car_month = month

    # –ü—Ä–æ–±–µ–≥ (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    mileage = response["spec"]["mileage"]
    formatted_mileage = f"{mileage:,} –∫–º"

    # –¢–∏–ø –ö–ü–ü
    transmission = response["spec"]["transmissionName"]
    formatted_transmission = "–ê–≤—Ç–æ–º–∞—Ç" if "Ïò§ÌÜ†" in transmission else "–ú–µ—Ö–∞–Ω–∏–∫–∞"

    car_engine_displacement = str(response["spec"]["displacement"])
    car_type = response["spec"]["bodyName"]

    # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10)
    car_photos = [
        generate_encar_photo_url(photo["path"]) for photo in response["photos"][:10]
    ]
    car_photos = [url for url in car_photos if url]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    vehicle_no = response["vehicleNo"]
    vehicle_id = response["vehicleId"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    formatted_car_date = f"01{month}{year}"
    formatted_car_type = "crossover" if car_type == "SUV" else "sedan"

    print_message(
        f"ID: {car_id}\nType: {formatted_car_type}\nDate: {formatted_car_date}\nCar Engine Displacement: {car_engine_displacement}\nPrice: {car_price} KRW"
    )

    return [
        car_price,
        car_engine_displacement,
        formatted_car_date,
        car_title,
        formatted_mileage,
        formatted_transmission,
        car_photos,
        year,
        month,
    ]


# Function to calculate the total cost
def calculate_cost(link, message):
    global car_data, car_id_external, car_month, car_year, krw_rub_rate, eur_rub_rate, rub_to_krw_rate, usd_rate

    print_message("–ó–ê–ü–†–û–° –ù–ê –†–ê–°–ß–Å–¢ –ê–í–¢–û–ú–û–ë–ò–õ–Ø")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    processing_message = bot.send_message(
        message.chat.id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥"
    )

    car_id = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    if "fem.encar.com" in link:
        car_id_match = re.findall(r"\d+", link)
        if car_id_match:
            car_id = car_id_match[0]  # Use the first match of digits
            car_id_external = car_id
            link = f"https://fem.encar.com/cars/detail/{car_id}"
        else:
            send_error_message(message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carid –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return
    else:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º carid —Å URL encar
        parsed_url = urlparse(link)
        query_params = parse_qs(parsed_url.query)
        car_id = query_params.get("carid", [None])[0]

    result = get_car_info(link)
    (
        car_price,
        car_engine_displacement,
        formatted_car_date,
        car_title,
        formatted_mileage,
        formatted_transmission,
        car_photos,
        year,
        month,
    ) = result

    if not car_price and car_engine_displacement and formatted_car_date:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me@BAZARISH_KPP"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        bot.send_message(
            message.chat.id, "–û—à–∏–±–∫–∞", parse_mode="Markdown", reply_markup=keyboard
        )
        bot.delete_message(message.chat.id, processing_message.message_id)
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
    if car_price and car_engine_displacement and formatted_car_date:
        car_engine_displacement = int(car_engine_displacement)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        formatted_car_year = f"20{car_year}"
        engine_volume_formatted = f"{format_number(car_engine_displacement)} cc"
        age = calculate_age(int(formatted_car_year), car_month)

        age_formatted = (
            "–¥–æ 3 –ª–µ—Ç"
            if age == "0-3"
            else (
                "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
                if age == "3-5"
                else "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç" if age == "5-7" else "–æ—Ç 7 –ª–µ—Ç"
            )
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ —Ä—É–±–ª–∏
        price_krw = int(car_price) * 10000

        response = get_customs_fees(
            car_engine_displacement,
            price_krw,
            int(f"20{car_year}"),
            car_month,
            engine_type=1,
        )

        # –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä
        customs_fee = clean_number(response["sbor"])
        customs_duty = clean_number(response["tax"])
        recycling_fee = clean_number(response["util"])

        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±–ª—è—Ö
        total_cost = (
            50000
            + (price_krw * krw_rub_rate)
            + (440000 * krw_rub_rate)
            + (100000 * krw_rub_rate)
            + (350000 * krw_rub_rate)
            + (600 * usd_rate)
            + customs_duty
            + customs_fee
            + recycling_fee
            + (346 * usd_rate)
            + 50000
            + 30000
            + 8000
        )

        total_cost_krw = (
            (50000 / krw_rub_rate)
            + (price_krw)
            + 440000
            + 100000
            + 350000
            + ((600 * usd_rate) / krw_rub_rate)
            + (customs_duty / krw_rub_rate)
            + (customs_fee / krw_rub_rate)
            + (recycling_fee / krw_rub_rate)
            + ((346 * usd_rate) / krw_rub_rate)
            + 50000 / krw_rub_rate
            + 30000 / krw_rub_rate
            + 8000 / krw_rub_rate
        )
        total_cost_usd = total_cost / usd_rate

        car_data["total_cost_usd"] = total_cost_usd
        car_data["total_cost_krw"] = total_cost_krw
        car_data["total_cost_rub"] = total_cost

        car_data["agent_korea_rub"] = 50000
        car_data["agent_korea_usd"] = 50000 / usd_rate
        car_data["agent_korea_krw"] = 50000 / krw_rub_rate

        car_data["advance_rub"] = 1000000 * krw_rub_rate
        car_data["advance_usd"] = (1000000 * krw_rub_rate) / usd_rate
        car_data["advance_krw"] = 1000000

        car_data["car_price_krw"] = price_krw
        car_data["car_price_usd"] = (price_krw) * krw_rub_rate / usd_rate
        car_data["car_price_rub"] = (price_krw) * krw_rub_rate

        car_data["dealer_korea_usd"] = 440000 * krw_rub_rate / usd_rate
        car_data["dealer_korea_krw"] = 440000
        car_data["dealer_korea_rub"] = 440000 * krw_rub_rate

        car_data["delivery_korea_usd"] = 100000 * krw_rub_rate / usd_rate
        car_data["delivery_korea_krw"] = 100000
        car_data["delivery_korea_rub"] = 100000 * krw_rub_rate

        car_data["transfer_korea_usd"] = 350000 * krw_rub_rate / usd_rate
        car_data["transfer_korea_krw"] = 350000
        car_data["transfer_korea_rub"] = 350000 * krw_rub_rate

        car_data["freight_korea_usd"] = 600
        car_data["freight_korea_krw"] = 600 * usd_rate / krw_rub_rate
        car_data["freight_korea_rub"] = 600 * usd_rate

        car_data["korea_total_usd"] = (
            (50000 / usd_rate)
            + (440000 * krw_rub_rate / usd_rate)
            + (100000 * krw_rub_rate / usd_rate)
            + (350000 * krw_rub_rate / usd_rate)
            + (600)
        )

        car_data["korea_total_krw"] = (
            (50000 / krw_rub_rate)
            + (440000)
            + (100000)
            + 350000
            + (600 * usd_rate / krw_rub_rate)
        )

        car_data["korea_total_rub"] = (
            (50000)
            + (440000 * krw_rub_rate)
            + (100000 * krw_rub_rate)
            + (350000 * krw_rub_rate)
            + (600 * usd_rate)
        )

        car_data["korea_total_plus_car_usd"] = (
            (50000 / usd_rate)
            + ((price_krw) * krw_rub_rate / usd_rate)
            + (440000 * krw_rub_rate / usd_rate)
            + (100000 * krw_rub_rate / usd_rate)
            + (350000 * krw_rub_rate / usd_rate)
            + (600)
        )
        car_data["korea_total_plus_car_krw"] = (
            (50000 / krw_rub_rate)
            + (price_krw)
            + (440000)
            + (100000)
            + 350000
            + (600 * usd_rate / krw_rub_rate)
        )
        car_data["korea_total_plus_car_rub"] = (
            (50000)
            + (price_krw * krw_rub_rate)
            + (440000 * krw_rub_rate)
            + (100000 * krw_rub_rate)
            + (350000 * krw_rub_rate)
            + (600 * usd_rate)
        )

        # –†–∞—Å—Ö–æ–¥—ã –†–æ—Å—Å–∏—è
        car_data["customs_duty_usd"] = customs_duty / usd_rate
        car_data["customs_duty_krw"] = customs_duty * rub_to_krw_rate
        car_data["customs_duty_rub"] = customs_duty

        car_data["customs_fee_usd"] = customs_fee / usd_rate
        car_data["customs_fee_krw"] = customs_fee / krw_rub_rate
        car_data["customs_fee_rub"] = customs_fee

        car_data["util_fee_usd"] = recycling_fee / usd_rate
        car_data["util_fee_krw"] = recycling_fee / krw_rub_rate
        car_data["util_fee_rub"] = recycling_fee

        car_data["broker_russia_usd"] = 346
        car_data["broker_russia_krw"] = 346 * usd_rate / krw_rub_rate
        car_data["broker_russia_rub"] = 346 * usd_rate

        car_data["svh_russia_usd"] = 50000 / usd_rate
        car_data["svh_russia_krw"] = 50000 / krw_rub_rate
        car_data["svh_russia_rub"] = 50000

        car_data["lab_russia_usd"] = 30000 / usd_rate
        car_data["lab_russia_krw"] = 30000 / krw_rub_rate
        car_data["lab_russia_rub"] = 30000

        car_data["perm_registration_russia_usd"] = 8000 / usd_rate
        car_data["perm_registration_russia_krw"] = 8000 / krw_rub_rate
        car_data["perm_registration_russia_rub"] = 8000

        car_data["russia_total_usd"] = (
            (customs_duty / usd_rate)
            + (customs_fee / usd_rate)
            + (recycling_fee / usd_rate)
            + (346)
            + (50000 / usd_rate)
            + (8000 / usd_rate)
        )
        car_data["russia_total_krw"] = (
            (customs_duty / krw_rub_rate)
            + (customs_fee / krw_rub_rate)
            + (recycling_fee / krw_rub_rate)
            + (346 * usd_rate / krw_rub_rate)
            + (50000 / krw_rub_rate)
            + (8000 / krw_rub_rate)
        )
        car_data["russia_total_rub"] = (
            customs_duty + customs_fee + recycling_fee + (346 * usd_rate) + 50000 + 8000
        )

        preview_link = f"https://fem.encar.com/cars/detail/{car_id}"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_message = (
            f"{car_title}\n\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted} (–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {month}/{year})\n"
            f"–ü—Ä–æ–±–µ–≥: {formatted_mileage}\n"
            f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n"
            f"–ö–ü–ü: {formatted_transmission}\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ö–æ—Ä–µ–µ: ‚Ç©{format_number(price_krw)}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: \n<b>${format_number(total_cost_usd)} </b> | <b>‚Ç©{format_number(total_cost_krw)} </b> | <b>{format_number(total_cost)} ‚ÇΩ</b>\n\n"
            f"üîó <a href='{preview_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>\n\n"
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @BAZARISH_KPP\n\n"
            "üîó <a href='https://t.me/bazarish_auto'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª</a>\n"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail")
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–í—ã–ø–ª–∞—Ç—ã –ø–æ –î–¢–ü",
                callback_data="technical_report",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/BAZARISH_KPP"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—á—ë—Ç –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        media_group = []
        for photo_url in sorted(car_photos):
            try:
                response = requests.get(photo_url)
                if response.status_code == 200:
                    photo = BytesIO(response.content)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç—å
                    media_group.append(
                        types.InputMediaPhoto(photo)
                    )  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫

                    # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ 10 —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                    if len(media_group) == 10:
                        bot.send_media_group(message.chat.id, media_group)
                        media_group.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø—ã
                else:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {photo_url} - {response.status_code}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ {photo_url}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 10
        if media_group:
            bot.send_media_group(message.chat.id, media_group)

        bot.send_message(
            message.chat.id,
            result_message,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

        bot.delete_message(
            message.chat.id, processing_message.message_id
        )  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É

    else:
        send_error_message(
            message,
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        bot.delete_message(message.chat.id, processing_message.message_id)


# Function to get insurance total
def get_insurance_total():
    global car_id_external, vehicle_no, vehicle_id

    print_message("[–ó–ê–ü–†–û–°] –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –û–¢–ß√ã–¢ –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï")

    formatted_vehicle_no = urllib.parse.quote(str(vehicle_no).strip())
    url = f"https://api.encar.com/v1/readside/record/vehicle/{str(vehicle_id)}/open?vehicleNo={formatted_vehicle_no}"

    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "Referer": "http://www.encar.com/",
            "Cache-Control": "max-age=0",
            "Connection": "keep-alive",
        }

        response = requests.get(url, headers)
        json_response = response.json()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        damage_to_my_car = json_response["myAccidentCost"]
        damage_to_other_car = json_response["otherAccidentCost"]

        print(
            f"–í—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: {format_number(damage_to_my_car)}"
        )
        print(f"–í—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: {format_number(damage_to_other_car)}")

        return [format_number(damage_to_my_car), format_number(damage_to_other_car)]

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return ["", ""]


# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global car_data, car_id_external, usd_rate

    if call.data.startswith("detail"):
        print_message("[–ó–ê–ü–†–û–°] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")

        detail_message = (
            f"<i>–ü–ï–†–í–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´</i>:\n\n"
            f"–ê–≥–µ–Ω—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É:\n<b>${format_number(car_data['agent_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['agent_korea_krw'])}</b> | <b>50000 ‚ÇΩ</b>\n\n"
            f"–ó–∞–¥–∞—Ç–æ–∫ (–±—Ä–æ–Ω—å –∞–≤—Ç–æ):\n<b>${format_number(car_data['advance_usd'])}</b> | <b>‚Ç©1,000,000</b> | <b>{format_number(car_data['advance_rub'])} ‚ÇΩ</b>\n\n\n"
            f"<i>–í–¢–û–†–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´</i>:\n\n"
            # f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∑–∞ –≤—ã—á–µ—Ç–æ–º –∑–∞–¥–∞—Ç–∫–∞):\n<b>${format_number(car_data['car_price_usd'])}</b> | <b>‚Ç©{format_number(car_data['car_price_krw'])}</b> | <b>{format_number(car_data['car_price_rub'])} ‚ÇΩ</b>\n\n"
            f"–î–∏–ª–ª–µ—Ä—Å–∫–∏–π —Å–±–æ—Ä:\n<b>${format_number(car_data['dealer_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['dealer_korea_krw'])}</b> | <b>{format_number(car_data['dealer_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞, —Å–Ω—è—Ç–∏–µ —Å —É—á—ë—Ç–∞, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:\n<b>${format_number(car_data['delivery_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['delivery_korea_krw'])}</b> | <b>{format_number(car_data['delivery_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ –≤ –ø–æ—Ä—Ç:\n<b>${format_number(car_data['transfer_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['transfer_korea_krw'])}</b> | <b>{format_number(car_data['transfer_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"–§—Ä–∞—Ö—Ç (–ü–∞—Ä–æ–º –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞):\n<b>${format_number(car_data['freight_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['freight_korea_krw'])}</b> | <b>{format_number(car_data['freight_korea_rub'])} ‚ÇΩ</b>\n\n\n"
            f"<b>–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ö–æ—Ä–µ–µ</b>:\n<b>${format_number(car_data['korea_total_usd'])}</b> | <b>‚Ç©{format_number(car_data['korea_total_krw'])}</b> | <b>{format_number(car_data['korea_total_rub'])} ‚ÇΩ</b>\n\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>:\n<b>${format_number(car_data['car_price_usd'])}</b> | <b>‚Ç©{format_number(car_data['car_price_krw'])}</b> | <b>{format_number(car_data['car_price_rub'])} ‚ÇΩ</b>\n\n"
            f"<b>–ò—Ç–æ–≥–æ</b>:\n<b>${format_number(car_data['korea_total_plus_car_usd'])}</b> | <b>‚Ç©{format_number(car_data['korea_total_plus_car_krw'])}</b> | <b>{format_number(car_data['korea_total_plus_car_rub'])} ‚ÇΩ</b>\n\n\n"
            f"<i>–†–ê–°–•–û–î–´ –†–û–°–°–ò–Ø</i>:\n\n\n"
            f"–ï–¥–∏–Ω–∞—è —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞:\n<b>${format_number(car_data['customs_duty_usd'])}</b> | <b>‚Ç©{format_number(car_data['customs_duty_krw'])}</b> | <b>{format_number(car_data['customs_duty_rub'])} ‚ÇΩ</b>\n\n"
            f"–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:\n<b>${format_number(car_data['customs_fee_usd'])}</b> | <b>‚Ç©{format_number(car_data['customs_fee_krw'])}</b> | <b>{format_number(car_data['customs_fee_rub'])} ‚ÇΩ</b>\n\n"
            f"–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä:\n<b>${format_number(car_data['util_fee_usd'])}</b> | <b>‚Ç©{format_number(car_data['util_fee_krw'])}</b> | <b>{format_number(car_data['util_fee_rub'])} ‚ÇΩ</b>\n\n\n"
            f"–ë—Ä–æ–∫–µ—Ä-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>${format_number(car_data['broker_russia_usd'])}</b> | <b>‚Ç©{format_number(car_data['broker_russia_krw'])}</b> | <b>{format_number(car_data['broker_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"–°–í–•-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>${format_number(car_data['svh_russia_usd'])}</b> | <b>‚Ç©{format_number(car_data['svh_russia_krw'])}</b> | <b>{format_number(car_data['svh_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è, –°–ë–ö–¢–°, –≠–ü–¢–°:\n<b>${format_number(car_data['lab_russia_usd'])}</b> | <b>‚Ç©{format_number(car_data['lab_russia_krw'])}</b> | <b>{format_number(car_data['lab_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>${format_number(car_data['perm_registration_russia_usd'])}</b> | <b>‚Ç©{format_number(car_data['perm_registration_russia_krw'])}</b> | <b>{format_number(car_data['perm_registration_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –†–æ—Å—Å–∏–∏: \n<b>${format_number(car_data['russia_total_usd'])}</b> | <b>‚Ç©{format_number(car_data['russia_total_krw'])}</b> | <b>{format_number(car_data['russia_total_rub'])} ‚ÇΩ</b>\n\n\n"
            f"–ò—Ç–æ–≥–æ –ø–æ–¥ –∫–ª—é—á –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ: \n<b>${format_number(car_data['total_cost_usd'])}</b> | <b>‚Ç©{format_number(car_data['total_cost_krw'])}</b> | <b>{format_number(car_data['total_cost_rub'])} ‚ÇΩ</b>\n\n"
            f"<b>–î–æ—Å—Ç–∞–≤–∫—É –¥–æ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @BAZARISH_KPP</b>\n"
        )

        # Inline buttons for further actions
        keyboard = types.InlineKeyboardMarkup()

        if call.data.startswith("detail_manual"):
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another_manual",
                )
            )
        else:
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )

        keyboard.add(
            types.InlineKeyboardButton(
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/BAZARISH_KPP"
            )
        )

        bot.send_message(
            call.message.chat.id,
            detail_message,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    elif call.data == "technical_report":
        bot.send_message(
            call.message.chat.id,
            "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –æ—Ç—á—ë—Ç –ø–æ –î–¢–ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥",
        )

        # Retrieve insurance information
        insurance_info = get_insurance_total()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
        if (
            insurance_info is None
            or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" in insurance_info[0]
            or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" in insurance_info[1]
        ):
            error_message = (
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç–∞—Ö. \n\n"
                f'<a href="https://fem.encar.com/cars/report/accident/{car_id_external}">üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é üîó</a>\n\n\n'
                f"<b>–ù–∞–π–¥–∏—Ç–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏:</b>\n\n"
                f"Î≥¥ÌóòÏÇ¨Í≥† Ïù¥Î†• (ÎÇ¥Ï∞® ÌîºÌï¥) - –í—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é\n"
                f"Î≥¥ÌóòÏÇ¨Í≥† Ïù¥Î†• (ÌÉÄÏ∞® Í∞ÄÌï¥) - –í—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü"
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/BAZARISH_KPP"
                )
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(
                call.message.chat.id,
                error_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            current_car_insurance_payments = (
                "0" if len(insurance_info[0]) == 0 else insurance_info[0]
            )
            other_car_insurance_payments = (
                "0" if len(insurance_info[1]) == 0 else insurance_info[1]
            )

            # Construct the message for the technical report
            tech_report_message = (
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: \n<b>{current_car_insurance_payments} ‚Ç©</b>\n\n"
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü: \n<b>{other_car_insurance_payments} ‚Ç©</b>\n\n"
                f'<a href="https://fem.encar.com/cars/report/inspect/{car_id_external}">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ö–µ–º—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫—É–∑–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/BAZARISH_KPP"
                )
            )

            bot.send_message(
                call.message.chat.id,
                tech_report_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )

    elif call.data == "calculate_another":
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_message = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
    if user_message == CALCULATE_CAR_TEXT:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    elif re.match(r"^https?://(www|fem)\.encar\.com/.*", user_message):
        calculate_cost(user_message, message)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    elif user_message == "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É":
        bot.send_message(
            message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ —Å—Å—ã–ª–∫–µ: @BAZARISH_KPP"
        )
    elif user_message == "–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp":
        contacts = [
            {"name": "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω", "phone": "+82 10-7650-3034"},
            # {"name": "–í–ª–∞–¥–∏–º–∏—Ä", "phone": "+82 10-7930-2218"},
            # {"name": "–ò–ª—å—è", "phone": "+82 10-3458-2205"},
        ]

        message_text = "\n".join(
            [
                f"[{contact['name']}](https://wa.me/{contact['phone'].replace('+', '')})"
                for contact in contacts
            ]
        )
        bot.send_message(message.chat.id, message_text, parse_mode="Markdown")

    elif user_message == "–û –Ω–∞—Å":
        about_message = "Bazarish Auto\n–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è —ç–∫—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è.\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏ –≤ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì.\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç.\n\n–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?\n‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.\n‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.\n‚Ä¢ –ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.\n\nüí¨ –í–∞—à –ø—É—Ç—å –∫ –Ω–∞–¥–µ–∂–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å!"
        bot.send_message(message.chat.id, about_message)
    elif user_message == "Telegram-–∫–∞–Ω–∞–ª":
        channel_link = "https://t.me/bazarish_auto"
        bot.send_message(
            message.chat.id, f"–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª: {channel_link}"
        )
    elif user_message == "Instagram":
        instagram_link = "https://www.instagram.com/bazarish_auto/"
        bot.send_message(
            message.chat.id,
            f"–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à Instagram: {instagram_link}",
        )
    elif user_message == "Tik-Tok":
        tiktok_link = "https://www.tiktok.com/@kpp_motors"
        bot.send_message(
            message.chat.id,
            f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–µ–∂–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –Ω–∞ –Ω–∞—à–µ–º TikTok: {tiktok_link}",
        )
    elif user_message == "Facebook":
        facebook_link = "https://www.facebook.com/share/1D8bg2xL1i/?mibextid=wwXIfr"
        bot.send_message(
            message.chat.id,
            f"KPP Motors –Ω–∞ Facebook: {facebook_link}",
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com –∏–ª–∏ fem.encar.com.",
        )


# Run the bot
if __name__ == "__main__":
    # initialize_db()
    set_bot_commands()
    get_rub_to_krw_rate()
    get_currency_rates()
    bot.polling(non_stop=True)
